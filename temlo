#!/usr/bin/env python3

import json
import os
import re
import sys
import inquirer

from datetime import datetime

# --- Variables ---

CONFIG_PATH = os.path.join(
        os.path.dirname(os.path.realpath(__file__)), "config.json")

# --- Helper Functions ---

def get_datetime_information():
    now = datetime.now()
    info = {}
    info["time"] = now.strftime("%H:%M")
    info["date"] = now.strftime("%m-%d-%Y")
    info["day"] = now.strftime("%A")
    return info

def validate_not_empty(answers, current):
        if not re.match(r".+", current):
            raise inquirer.errors.ValidationError("",
                reason = "An empty message isn't allowed.")
        return True

def prompt_temptation():
    answer = inquirer.list_input("What is tempting you",
        choices  = ["... Add a new temptation", *get_config_list("temptation_list")])
    if answer == "... Add a new temptation":
        answer = inquirer.text(message = "Enter the new temptation",
            validate = validate_not_empty)
        print("\n")
        CONFIG["temptation_list"].append(answer)
        save_config()
    return answer

def prompt_intensity():
    def intensity_validation(answers, current):
        if not re.match(r"\b[1-5]\b", current):
            raise inquirer.errors.ValidationError("",
                reason = "Only numbers from 1 to 5.")
        return True

    question = [inquirer.Text(name = "intensity",
        message = "From 1 to 5, how intense is the temptation",
        validate = intensity_validation)]
    
    answer = inquirer.prompt(question)
    print("\n")
    return answer["intensity"]

def prompt_cue():
    answer = inquirer.list_input("The cue that prompted it",
        choices  = ["... Add a new cue", *get_config_list("cue_list")])
    if answer == "... Add a new cue":
        answer = inquirer.text(message = "Enter the new cue",
            validate = validate_not_empty)
        print("\n")
        CONFIG["cue_list"].append(answer)
        save_config()
    return answer

def create_log():
    log = {}
    log["time_info"] = get_datetime_information()
    log["temptation"] = prompt_temptation()
    log["intensity"] =  prompt_intensity()
    log["cue"] = prompt_cue()
    
    # Optional Description
    add_description = inquirer.confirm(
        "Do you want to add a description?", default=False)
    if add_description:
        log["description"] = inquirer.text(
            message = "Write a short description of what happened: ",
            validate = validate_not_empty)
    else:
        log["description"] = None

    return log

def load_config():
    # Create a config file if it doesn't exist
    if not os.path.exists(CONFIG_PATH):
        with open(CONFIG_PATH, "w") as config_file:
            json.dump({"log_path": ""}, config_file, indent = 2)
    
    with open(CONFIG_PATH, "r") as config_file:
        return json.load(config_file)

def save_config():
    global CONFIG
    with open(CONFIG_PATH, "w") as config_file:
        json.dump(CONFIG, config_file, indent = 2)


def set_log_path():
    global CONFIG
    question = [
    inquirer.Path(name="path", message="Give me a path to store the log archive",
        path_type=inquirer.Path.DIRECTORY, exists=True)
]
    CONFIG["log_path"] = os.path.abspath(inquirer.prompt(question)["path"])
    save_config()

def get_config_list(list_name):
    global CONFIG
    if list_name not in CONFIG.keys():
        CONFIG[list_name] = []
    return CONFIG[list_name]


def load_log_archive():
    # Create archive file if it doesn't exit
    archive_path = os.path.join(CONFIG["log_path"], "temlo_archive.json")
    if not os.path.exists(archive_path):
        with open(archive_path, "w") as archive_file:
            json.dump([], archive_file, indent = 2)
    
    with open(archive_path, "r") as archive_file:
        return json.load(archive_file)

def save_log(log):
    global LOG_ARCHIVE
    LOG_ARCHIVE.append(log)
    archive_path = os.path.join(CONFIG["log_path"], "temlo_archive.json")
    with open(archive_path, "w") as archive_file:
        json.dump(LOG_ARCHIVE, archive_file, indent = 2)


usage_text = """Log information on bothersome temptations that try to keep you from
conquering your bad habits so you can analyze your behavior patterns.

USAGE
  temlo <command>
  
CORE COMMANDS
  """

# Main


COMMANDS = ["log"]
CONFIG = load_config()
LOG_ARCHIVE = load_log_archive()

args = sys.argv[1:]

if (args_count := len(args)) == 0:
    print(usage_text)
    sys.exit()

elif args_count == 1:
    if args[0] == "--help" or args[0] == "-h":
        print(usage_text)
        sys.exit()
    
    elif args[0] == "log":
        if CONFIG["log_path"] == "":
            set_log_path()
        try:
            log = create_log()
            save_log(log)
        except:
            print("Operation cancelled")
    
    elif args[0] == "set-path":
        set_log_path()

    elif args[0] not in COMMANDS:
        print(
          f'Error: Command "{args[0]}" doesn\'t exist. See "temlo --help" for help.'
          )
        sys.exit()